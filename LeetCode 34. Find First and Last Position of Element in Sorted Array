class Solution {
public:
int last(vector <int> &nums, int target){
    int start=0,end=nums.size()-1;
    int mid=(start+end)/2;
    int ans=-1;
    while(start<=end){
        if(target==nums[mid]){//rightmost occurancekeliye
            ans=mid;
            start = mid +1 ;
        }
        else if(target<nums[mid]){//left part me jana
            end=mid - 1;
        }
        else{//right part
            start = mid +1;
        }
        mid=(start+end)/2;
    }return ans;
}
int first(vector <int> &nums, int target){
    int start=0,end=nums.size()-1;
    int mid=(start+end)/2;
    int ans=-1;
    while(start<=end){
        if(target==nums[mid]){//leftmost occurancekeliye
            ans=mid;
            end=mid-1; 
        }
        else if(target<nums[mid]){//left part me jana
            end=mid - 1;
        }
        else{//right part
            start = mid +1;
        }
        mid=(start+end)/2;
    }return ans;
}
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> result (2,-1);
        result[0]= first(nums,target);
        if(result[0]!= -1){
            result[1]= last(nums,target);

        }
        return result;
        
    }
};
